---
- name: Retrieve info about second network
  os_networks_info:
    cloud: "{{ openstack_cloud_name }}"
    name: "{{ openshift_masters_second_network_name }}"
  register: register_second_network_info

- name: Set second network subnet CIDR fact
  set_fact:
    openshift_masters_second_network: "{{ register_second_network_info.openstack_networks[0].subnet_ipam[0].subnet_cidr }}"

- name: Set os_port_master_second variable
  set_fact:
    os_port_master_second: "{{ openshift_cluster_id }}-master-second-port"

- name: Retrieve information about all master servers
  os_server_info:
    cloud: "{{ openstack_cloud_name }}"
    server: "openshift*master*"
  register: register_master_servers

- name: Create second master port
  os_port:
    cloud: "{{ openstack_cloud_name }}"
    state: present
    name: "{{ item.1 }}-{{ item.0 }}"
    network: "{{ openshift_masters_second_network_name }}"
    fixed_ips:
      - ip_address: "{{ openshift_masters_second_network | next_nth_usable(openshift_masters_nth_usable_addr+item.0) }}"
  with_indexed_items: "{{ [os_port_master_second] * control_plane_servers }}"

- name: Attach second network interface to the master servers
  ignore_errors: True
  shell:
    cmd: "openstack server add port {{ openshift_cluster_id }}-master-{{ item.0 }} {{ item.1 }}-{{ item.0 }}"
  with_indexed_items: "{{ [os_port_master_second] * control_plane_servers }}" 

- name: Get master nodes ip addresses
  os_server_info:
    cloud: "{{ openstack_cloud_name }}"
    server: "*master*"
  register: reg_masters

- name: Set the second interface default gw
  set_fact:
    masters_second_if_gw_ip: "{{ openshift_masters_second_network | ansible.netcommon.ipaddr('net') | ansible.netcommon.ipaddr('1') | regex_findall('\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b') }}"

- name: Delete route for the second interface
  local_action: "shell ssh -F ssh.cfg master{{ item }} 'sudo route del default gw {{ masters_second_if_gw_ip }}'"
  loop: [0, 1, 2]
